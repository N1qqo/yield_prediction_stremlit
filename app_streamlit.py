import streamlit as st
import pandas as pd
import numpy as np
import tensorflow as tf
import joblib
import os
import matplotlib.pyplot as plt

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –º–æ–¥–µ–ª–∏ –∏ –º–∞—Å—à—Ç–∞–±–∞—Ç–æ—Ä–∞
model_path = r"C:\–î–∏—Å–∫ D\Python\Model\New_Model\yield_model.h5"
scaler_path = r"C:\–î–∏—Å–∫ D\Python\Model\New_Model\scaler.save"

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
if os.path.exists(model_path):
    model = tf.keras.models.load_model(model_path, compile=False)
else:
    st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
    st.stop()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—à—Ç–∞–±–∞—Ç–æ—Ä–∞
if os.path.exists(scaler_path):
    scaler = joblib.load(scaler_path)
else:
    st.error("‚ùå –ú–∞—Å—à—Ç–∞–±–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
    st.stop()

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏", layout="centered")
st.title("üåæ –ü—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ (—Ç/–≥–∞) –ø–æ –∞–≥—Ä–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")

# --- –í—ã–±–æ—Ä –ø–æ–ª—è (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞) ---
st.subheader("1. –í—ã–±–æ—Ä –ø–æ–ª—è")
field_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è", options=[1, 2, 3])

# --- –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
st.subheader("2. –í–≤–µ–¥–∏—Ç–µ –∞–≥—Ä–æ–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")

temp_min = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", -5.0, 5.0, 0.0)
temp_avg = st.slider("–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", 5.0, 20.0, 10.0)
temp_max = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", 20.0, 40.0, 30.0)
rainfall = st.slider("–°—É–º–º–∞ –æ—Å–∞–¥–∫–æ–≤ –∑–∞ —Å–µ–∑–æ–Ω (–º–º)", 0, 600, 300)
ph = st.slider("pH –ø–æ—á–≤—ã", 4.0, 9.0, 6.0)
moisture = st.slider("–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã (%)", 0, 60, 30)
st.header("3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏—è: –î–∏–∞–º–º–æ—Ñ–æ—Å–∫–∞")
use_custom = st.checkbox("üîß –í–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é", value=False)

if not use_custom:
    fertilizer_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∞–º–º–æ—Ñ–æ—Å–∫–∏", options=[
        "10-26-26", "9-25-25", "12-24-12", "10-20-20"
    ])
    fertilizer_dict = {
        "10-26-26": (10, 26, 26),
        "9-25-25": (9, 25, 25),
        "12-24-12": (12, 24, 12),
        "10-20-20": (10, 20, 20)
    }
    n, p, k = fertilizer_dict[fertilizer_type]
    st.markdown(f"–ê–∑–æ—Ç (N): **{n}**, –§–æ—Å—Ñ–æ—Ä (P‚ÇÇO‚ÇÖ): **{p}**, –ö–∞–ª–∏–π (K‚ÇÇO): **{k}**")
else:
    n = st.slider("–ê–∑–æ—Ç (N)", 0, 100, 0, step=1)
    p = st.slider("–§–æ—Å—Ñ–æ—Ä (P‚ÇÇO‚ÇÖ)", 0, 100, 0, step=1)
    k = st.slider("–ö–∞–ª–∏–π (K‚ÇÇO)", 0, 100, 0, step=1)

# --------------------
# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# --------------------
acidic_soil = int(ph < 5.0)
alkaline_soil = int(ph > 8.0)
drought = int(rainfall < 150)
low_fertility = int((n + p + k) < 50)
low_moisture = int(moisture < 20)
min_temp_extreme = int(temp_min < -10.0)
max_temp_extreme = int(temp_max > 35.0)

# --------------------
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# --------------------
st.subheader("3. –®—Ç—Ä–∞—Ñ–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
st.markdown(f"- –ö–∏—Å–ª–∞—è –ø–æ—á–≤–∞ (pH < 4.5): **{acidic_soil}**")
st.markdown(f"- –©–µ–ª–æ—á–Ω–∞—è –ø–æ—á–≤–∞ (pH > 8.0): **{alkaline_soil}**")
st.markdown(f"- –ó–∞—Å—É—Ö–∞ (–æ—Å–∞–¥–∫–∏ < 150 –º–º): **{drought}**")
st.markdown(f"- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —É–¥–æ–±—Ä–µ–Ω–∏–π (N+P+K < 50): **{low_fertility}**")
st.markdown(f"- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å (< 20%): **{low_moisture}**")
st.markdown(f"- –°–∏–ª—å–Ω—ã–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏ (tmin < -10¬∞C): **{min_temp_extreme}**")
st.markdown(f"- –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≥—Ä–µ–≤ (tmax > 35¬∞C): **{max_temp_extreme}**")

# --- –í—Ö–æ–¥–Ω–æ–π –≤–µ–∫—Ç–æ—Ä ---
input_data = np.array([[
    field_id, temp_min, temp_avg, temp_max,
    rainfall, ph, moisture,
    n, p, k,
    acidic_soil, alkaline_soil,
    drought, low_fertility, low_moisture
]])

# --- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ ---
scaled_input = scaler.transform(input_data)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ CSV
LOG_PATH = "outlier_log.csv"
log_entry = pd.DataFrame([[
field_id, temp_min, temp_avg, temp_max, rainfall, ph, moisture,
n, p, k
]], columns=[
"field_id", "temp_min", "temp_avg", "temp_max", "rainfall", "ph", "moisture",
"N", "P", "K"
])
log_entry.to_csv(LOG_PATH, mode='a', header=not os.path.exists(LOG_PATH), index=False)

# --- –ü—Ä–æ–≥–Ω–æ–∑ ---
if st.button("üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å"):
    prediction = model.predict(scaled_input)[0][0]
    st.success(f"üå± –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: **{prediction:.2f} —Ç/–≥–∞**")
    st.info(f"‚ö†Ô∏è –£—á—Ç–µ–Ω–æ —à—Ç—Ä–∞—Ñ–æ–≤: **{int(np.sum(input_data[0][10:]))} –∏–∑ 5**")

    # --------------------
    # üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    # --------------------
    warnings = []

    if temp_max > 35:
        warnings.append("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è (‚â• 35¬∞C)")
    if temp_min < -4:
        warnings.append("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è (‚â§ -4¬∞C)")
    if ph < 4.5 or ph > 8.0:
        warnings.append("–ö–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (4.5‚Äì8.0)")
    if rainfall < 50 or rainfall > 500:
        warnings.append("–°—É–º–º–∞ –æ—Å–∞–¥–∫–æ–≤ –∞–Ω–æ–º–∞–ª—å–Ω–∞—è (–º–µ–Ω–µ–µ 50 –∏–ª–∏ –±–æ–ª–µ–µ 500 –º–º)")
    if moisture < 5 or moisture > 50:
        warnings.append("–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (5%‚Äì50%)")
    if (n + p + k) > 70:
        warnings.append("–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–æ–±—Ä–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (> 70 –∫–≥/–≥–∞)")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    if warnings:
        st.warning(
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤! "
            "–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º:\n\n" +
            "\n".join([f"- {w}" for w in warnings])
        )

    # -------------------
    # –ì—Ä–∞—Ñ–∏–∫: –≤–∫–ª–∞–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    # -------------------
    factors = ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–ü–æ—á–≤–∞', '–£–¥–æ–±—Ä–µ–Ω–∏—è', '–®—Ç—Ä–∞—Ñ—ã']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    num_penalties = int(np.sum(input_data[0][10:15]))  # –µ—Å–ª–∏ 5 —à—Ç—Ä–∞—Ñ–Ω—ã—Ö!

    values = [
        temp_avg + (temp_max - temp_min) / 2 + rainfall / 50,
        ph + moisture / 5,
        (n + p + k) / 10,
        -num_penalties * 2
    ]

    fig, ax = plt.subplots(figsize=(6, 4))
    ax.bar(factors, values, color=['#4CAF50', '#FFC107', '#2196F3', '#F44336'])
    ax.set_ylabel("–£—Å–ª–æ–≤–Ω—ã–π –≤–∫–ª–∞–¥")
    ax.set_title("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
    st.pyplot(fig)